package robot.test;

import robot.base.LCDInfo;
import robot.navigation.*;
import robot.sensors.ColorGather;
import lejos.nxt.ColorSensor;
import lejos.nxt.LCD;
import lejos.nxt.Motor;
import lejos.nxt.NXTRegulatedMotor;
import lejos.nxt.SensorPort;

/**
 * Test class.
 * Uses mocked classes for the purpose of testing navigation.
 * 
 * @author Andreas
 * @version 1.1.0
 * @since 2013-11-09
 */
public class OdoCorrTest extends Thread{	
	
	private static ColorSensor csLeft = new ColorSensor(SensorPort.S1);
	private static ColorSensor csRight = new ColorSensor(SensorPort.S2);
	private static ColorSensor csBlockReader = new ColorSensor(SensorPort.S3);
	
	private NXTRegulatedMotor leftMotor = Motor.A;
	private NXTRegulatedMotor rightMotor = Motor.B;
	
	private TwoWheeledRobot robo;
	Navigation2 nav;
	OdometryCorrection corr;
	private ColorGather cg;
	
	 // This controls which points the navigation travels to
	double[][] waypoints = new double[][]{{105,45},{105,105},{45,105},{45,45}};
	double[] pos = new double[3];
	int wpIndex = 0;
	
	public static void main(String[] args) {
		new OdoCorrTest();
	}
	public OdoCorrTest(){
		cg = new ColorGather(csLeft, csRight, csBlockReader);
		
		robo = new TwoWheeledRobot(leftMotor, rightMotor);
		corr = new OdometryCorrection(cg);
		new Odometer(robo, corr);
		nav = new Navigation2(robo);
		
		//new LCDInfo();
		
		this.start();
	}
	// Runs all the control code (calling localization, navigation, identification, etc)
	public void run(){
		while(wpIndex < waypoints.length){
			
			navigate();
			
			drawReadings()
			try{ Thread.sleep(1000); }
			catch(InterruptedException e){ }
		}
	}
	// Handles navigating to a point (allows the scanner to continue in case an unexpected obstacle appears (i.e. the other player)
	private void navigate(){
		nav.travelTo(waypoints[wpIndex][0], waypoints[wpIndex][1]);
		//nav.turnTo(45, 0);
		
		while(!nav.isDone()){
			try{ Thread.sleep(200); }
			catch(InterruptedException e){ }
		}
		
		wpIndex++;
	}
	private void drawReadings(){
		LCD.clear();
		Odometer.getPosition(pos);
		LCD.drawString("X:" + pos[0],0,0);
		LCD.drawString("Y:" + pos[1],0,0);
		LCD.drawString("T:" + pos[2],0,0);
	}
}

