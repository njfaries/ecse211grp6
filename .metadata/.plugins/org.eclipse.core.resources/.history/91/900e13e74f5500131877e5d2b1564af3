package robot.test;

import robot.base.LCDInfo;
import robot.navigation.*;
import robot.sensors.ColorGather;
import lejos.nxt.ColorSensor;
import lejos.nxt.LCD;
import lejos.nxt.Motor;
import lejos.nxt.NXTRegulatedMotor;
import lejos.nxt.SensorPort;

/**
 * Test class for ododmetery correction
 * Place in the vicinity of 45, 45 and let it run over the first line an a slightly off angle.
 * 
 * @author Andreas
 * @version 1.1.0
 * @since 2013-11-09
 */
public class ScanningTest2 extends Thread{	
	
	private static ColorSensor csLeft = new ColorSensor(SensorPort.S1);
	private static ColorSensor csRight = new ColorSensor(SensorPort.S2);
	private static ColorSensor csBlockReader = new ColorSensor(SensorPort.S3);
	
	private NXTRegulatedMotor leftMotor = Motor.A;
	private NXTRegulatedMotor rightMotor = Motor.B;
	
	private TwoWheeledRobot robo;
	Navigation2 nav;
	OdometryCorrection corr;
	private ColorGather cg;
	
	 // This controls which points the navigation travels to
	double[][] waypoints = new double[][]{{105,45},{105,105},{45,105},{45,45}};
	double[] pos = new double[3];
	int wpIndex = 0;
	
	public static void main(String[] args) {
		new ScanningTest2();
	}
	public ScanningTest2(){
		corr = new OdometryCorrection();
		cg = new ColorGather(csLeft, csRight, csBlockReader, corr);
		
		robo = new TwoWheeledRobot(leftMotor, rightMotor);
		
		new Odometer(robo);
		nav = new Navigation2(robo);
		
		//new LCDInfo();
		
		this.start();
	}
	// Runs all the control code (calling localization, navigation, identification, etc)
	public void run(){
		search();
		
		while(true){
			try{ Thread.sleep(2000); }
			catch(InterruptedException e){ }
		}
	}
	// Search method (performs scans)
	private void search(double fromAngle, double toAngle){
		LCD.drawString("Searching",0,0);
		
		nav.turnTo(fromAngle, 0);
		while(!nav.isDone()){
			try{Thread.sleep(400);} catch(InterruptedException e){ }
			
		}
		nav.stop();
		
		double[] newBlock = scan.findBlock(toAngle);
		
		if(newBlock == null)
			return;
		
		Odometer.getPosition(pos);
		double angleHeading = Math.toDegrees(Math.atan2(newBlock[1] - pos[1], newBlock[0] - pos[0]));
		
		nav.turnTo(angleHeading, 0);
		while(!nav.isDone()){
			try{Thread.sleep(400);} catch(InterruptedException e){ }
			
		}
		nav.stop();
		
		nav.move();
		while(!us.flagObstruction()){
			try{Thread.sleep(20);} catch(InterruptedException e){ }
		}
		nav.stop();
	}
}

