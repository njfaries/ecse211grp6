package robot.mapping;

import lejos.nxt.LCD;
import robot.navigation.Navigation2;
import robot.navigation.Odometer;
import robot.sensors.USGather;

public class Scan2 {
	public static boolean scanParsed = true;
	/**
	 * Starts a scan that takes in the robot's navigator and ultrasonic information then, after the scan is complete,
	 * runs a new ScanAnalysis with the collected data;
	 * @param nav - The Navigation class being used
	 * @param us - The USGather class being used
	 */
	public double[] Scan2(Navigation2 nav, USGather us){	
		LCD.clear();
		LCD.drawString("scanning", 0, 5);
		
		// Creates empty array lists that data is added to
		double[] pos = new double[3];
		// keeps taking in data until the robot stops turning (i.e. the scan completes)
		double[] risingEdge = null;	
		double[] fallingEdge = null;
		boolean blockFound = false;
		double edgeDist = -1;
		
		// If the scan starts facing a block, set the search type to falling edge and set this distance to the current distance
		if(us.getDistance() < 60){
			blockFound = true;
			edgeDist = us.getDistance();
		}
		
		// Keep turning Clockwise to find the rising edge of the block (or the falling edge if the above condition is true)
		while(!nav.isDone()){
			Odometer.getPosition(pos);
			double dist = us.getDistance();
			double angle = pos[2];

			// When finding a close distance
			// If the search type is rising, latch this dist/angle to the rising edge array and search for a falling edge.
			if(dist < 60 && risingSearch){
				risingEdge = new double[]{dist, angle};
				risingSearch = false;
				continue;
			}
			
			// If the search type is falling, latch the current dist/angle to the falling edge array
			// If a rising edge has already been found (i.e. the search did *not* begin while detecting an object) calculate the center and return this value
			// Otherwise break the loop and continue
			if((dist > edgeDist + 15 || dist < edgeDist - 15) && !risingSearch){
				fallingEdge = new double[]{dist, angle};
				
				if(risingEdge != null)
					return findCenter(risingEdge, fallingEdge);
				else
					break;
			}

			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		nav.stop();
		
		// If the search happened to not pick up anything, return null
		// Otherwise, continue
		if(risingSearch)
			return null;
	
		// Reverse to find the proper rising edge (left corner, technically now a falling edge)
		nav.rotate(2);
		// Sleep to make sure the right corner isn't picked up a second time
		try { Thread.sleep(200); } catch (InterruptedException e) {}
		while(!nav.isDone()){
			Odometer.getPosition(pos);
			double dist = us.getDistance();
			double angle = pos[2];

			if(dist > edgeDist + 15 || dist < edgeDist - 15){
				risingEdge = new double[]{dist, angle};
				return findCenter(risingEdge, fallingEdge);
			}

			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		nav.stop();
		
		return null;
	}
	private double[] findCenter(double[] rtRising, double[] rtFalling){
		double[] xyRising = new double[]{};
		double[] xyFalling = new double[]{};
		
		return new double[]{(xyRising[0] + xyFalling[0]) / 2, (xyRising[1] + xyFalling[1]) / 2};
	}
}
