package robot.mapping;

import java.util.ArrayList;

import lejos.nxt.LCD;
import robot.base.Status;
import robot.navigation.Navigation;
import robot.navigation.Navigation2;
import robot.navigation.Odometer;
import robot.sensors.USGather;

public class Scan2 {

	private final int ANGLE_CORRECTION = 20;
		
	public static boolean scanParsed = true;
	private static Object lock = new Object();
	/**
	 * Starts a scan that takes in the robot's navigator and ultrasonic information then, after the scan is complete,
	 * runs a new ScanAnalysis with the collected data;
	 * @param nav - The Navigation class being used
	 * @param us - The USGather class being used
	 */
	public Scan2(Navigation2 nav, USGather us){	
		LCD.clear();
		LCD.drawString("scanning", 0, 5);
		
		// Creates empty array lists that data is added to
		double[] pos = new double[3];
		// keeps taking in data until the robot stops turning (i.e. the scan completes)
		double[] risingEdge = null;	
		double[] fallingEdge = null;
		boolean risingSearch = true;
		double edgeDist = -1;
		
		if(us.getDistance() < 60){
			risingSearch = false;
			edgeDist = us.getDistance();
		}
		while(!nav.isDone()){
			Odometer.getPosition(pos);
			LCD.drawString("t: " + (int)pos[2],0,6);
			double dist = us.getDistance();
			double angle = (int)pos[2] + ANGLE_CORRECTION;

			if(dist < 60 && risingSearch){
				risingEdge = new double[]{dist, pos[2]};
				risingSearch = false;
			}
			else if((dist > edgeDist + 15 || dist < edgeDist - 15) && !risingSearch){
				fallingEdge = new double[]{dist, pos[2]};
				if(risingEdge != null)
					break;
			}

			try { Thread.sleep(50); } catch (InterruptedException e) {}
		}
		nav.stop();
		
		//scanParsed = true;
	}
	private double[] findCenter(double[] rtRising, double[] rtFalling){
		double[] xyRising = new double[]{};
		double[] xyFalling = new double[]{};
		
		double[] xyCenter = new double[]{(xyRising[0] + xyFalling[0]) / 2, (xyRising[1] + xyFalling[1]) / 2}[]
	}
	/**
	 * Returns whether or not the latest scan has been fully parsed
	 * @return boolean - scanParsed
	 */
	public static boolean scanParsed(){
		synchronized(lock){
			return scanParsed;
		}
	}
}
