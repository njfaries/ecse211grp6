package robot.base;

import robot.bluetooth.*;
import robot.collection.*;
import robot.localization.Localization;
import robot.mapping.*;
import robot.navigation.*;
import robot.sensors.*;

import lejos.nxt.Button;
import lejos.nxt.LCD;
import lejos.nxt.MotorPort;
import lejos.nxt.NXTRegulatedMotor;
import lejos.nxt.ColorSensor;
import lejos.nxt.SensorPort;
import lejos.nxt.UltrasonicSensor;

/**
 * Contains the main method for the robot. Initiates classes and passes them the
 * necessary motors, sensors, and various constants. Controls and and delegates
 * tasks to various subroutines.
 * 
 * @author Andreas, Nathaniel
 * @version 1.2.0
 * @since 2013-11-04
 */
public class RobotController extends Thread {
	public enum FunctionType {
		IDLE, LOCALIZE, SEARCH, IDENTIFY, BOARD_NAVIGATE, BLOCK_NAVIGATE, OPEN_NAVIGATE, COLLECT, END_NAVIGATE, RELEASE, RETURN
	};

	public enum RobotMode {
		STACKER, GARBAGE
	};

	private static double OPEN_DIST = 40;
	
	private static NXTRegulatedMotor leftMotor = new NXTRegulatedMotor(MotorPort.A);
	private static NXTRegulatedMotor rightMotor = new NXTRegulatedMotor(MotorPort.B);
	private static NXTRegulatedMotor cageMotor = new NXTRegulatedMotor(MotorPort.C);

	private static UltrasonicSensor usFront = new UltrasonicSensor(SensorPort.S4);
	private static UltrasonicSensor usTop = new UltrasonicSensor(SensorPort.S3);
	
	private static ColorSensor csLeft = new ColorSensor(SensorPort.S1);
	private static ColorSensor csRight = new ColorSensor(SensorPort.S2);

	private CollectionSystem collection;
	private Navigation2 nav;
	private TwoWheeledRobot robo;

	private USGather us;
	private ColorGather cg;

	private Localization loc;
	private Scanner sc;
	
	StartCorner corner = StartCorner.BOTTOM_LEFT;
	PlayerRole role = PlayerRole.BUILDER;
	int[] greenZone = new int[] {150,180,150,180};
	int[] redZone  = new int[] {10,10,15,15};

	private int blocksCollected = 0;
	private int maxBlocks = 2;
	private double searchFrom = 0, searchTo = 90;
	
	private FunctionType function = FunctionType.BOARD_NAVIGATE;

	private double[] pos = new double[3];

	public static void main(String[] args) {
		new RobotController();
	}

	/**
	 * The robot controller delegates the starting and ending of various
	 * subtasks like localization, searching and collection.
	 */
	public RobotController() {
		//receive();
		
		new Map2(role, redZone, greenZone);
				
		robo = new TwoWheeledRobot(leftMotor, rightMotor);
		nav = new Navigation2(robo);
		
		collection = new CollectionSystem(cageMotor, nav);
		collection.rotateCage(-330);
		
		int buttonChoice = Button.waitForAnyPress();
		while (buttonChoice != Button.ID_ENTER){}
		
		us = new USGather(usFront, usTop);
		cg = new ColorGather(csLeft, csRight, new OdometryCorrection());
		
		//need to construct localization with transmission.startingCorner
		loc = new Localization(us, cg, StartCorner.BOTTOM_LEFT, nav);
		sc = new Scanner(nav, us);
		
		//corrector = new OdometryCorrection(cg, WHEEL_RADIUS, ODOCORRECT_SENS_WIDTH, ODOCORRECT_SENS_DIST);
		new Odometer(robo);

		//id = new Identify(cg, us, nav);
				
		this.start();
	}

	// Runs all the control code (calling localization, navigation,
	// identification, etc)
	public void run() {
		boolean running = true;
		double[] endCenter = Map2.getEndCenter();
		
		while (running) {
			switch(function) {
				case IDLE:
					try { Thread.sleep(500); }
					catch(InterruptedException e){ }
					break;
				case LOCALIZE:
					localize();
					
					searchFrom = 0;
					searchTo = 90;
					function = FunctionType.BOARD_NAVIGATE;
					break;
				case BOARD_NAVIGATE:
					navigateBoard(1);
					break;
				case SEARCH:
					sc.scanRange(searchFrom, searchTo);
					function = FunctionType.OPEN_NAVIGATE;
					continue;
				case BLOCK_NAVIGATE: 
				case IDENTIFY:
				case OPEN_NAVIGATE:
					double t = sc.bestOpenAngle(searchFrom, searchTo, endCenter[0], endCenter[1]);
					//if -1 is return of best open angle, none open, scan again
					if(t == -1) { 
						function = FunctionType.SEARCH;
						break;
					}
					Odometer.getPosition(pos);
					double x = pos[0] + OPEN_DIST * Math.cos(Math.toRadians(t));
					double y = pos[1] + OPEN_DIST * Math.sin(Math.toRadians(t));
					
					
					//if green zone center is within a threshold go to it as it is assumed as open
					if(blocksCollected >= maxBlocks && Math.abs(pos[0] - endCenter[0]) < 15 
							&& Math.abs(pos[1] - endCenter[1]) < 15 ) {
						function = FunctionType.RELEASE;
						break;
					}
					
					double heading = Math.toDegrees(Math.atan2(endCenter[1] - pos[1], endCenter[0] - pos[0]));
					nav.turnTo(heading,0);
					while( !nav.isDone() ) {
						try { Thread.sleep(200); }
						catch(InterruptedException e){ }
					}
					nav.stop();
					
					nav.move();
					try { Thread.sleep(3000); }
					catch(InterruptedException e){ }
					nav.stop();
					
					Odometer.getPosition(pos);
					searchFrom = pos[2] - 45;
					searchTo = pos[2] + 45;
					
					function = FunctionType.SEARCH;
					continue;
				case END_NAVIGATE:
					
				case COLLECT:
					collect();
					continue;
				case RELEASE:
					endCenter = Map2.getEndCenter();
					nav.travelTo(endCenter[0], endCenter[1]);
					while( !nav.isDone() ) {
						try { Thread.sleep(200); }
						catch(InterruptedException e){ }
					}
					release();
					continue;
				case RETURN:
					returnToStart(1);
					running = false;
					continue;
			}
			
			try { Thread.sleep(50); } catch (InterruptedException e) { }
		}
	}

	// Receives instruction via bluetooth
	private void receive() {
		BluetoothConnection conn = new BluetoothConnection();
		// as of this point the bluetooth connection is closed again, and you can pair to another NXT (or PC) if you wish
		
		Transmission t = conn.getTransmission();
		if (t == null) {
			LCD.drawString("Failed to read transmission", 0, 5);
		} else {
			corner = t.startingCorner;
			role = t.role;
			// green zone is defined by these (bottom-left and top-right) corners:
			greenZone = t.greenZone;
			
			// red zone is defined by these (bottom-left and top-right) corners:
			redZone = t.redZone;
		}
		// stall until user decides to end program
		Button.waitForAnyPress();
	}

	// Initiates the localization of the robot
	private void localize() {
		cageMotor.rotate(-330);
		loc.localize();
	}
	
	private void navigateBoard(int mode){
		// Back up a bit
		if(mode == -1){
			nav.reverse();
			try { Thread.sleep(1000); } 
			catch (InterruptedException e) {}
			nav.stop();
		}
		
		// Turn either by +-90degrees or to face the green (or red) zone
		Odometer.getPosition(pos);
		double turnAngle = 0;
		if(mode == 1){
			double[] endCenter = Map2.getEndCenter();
			LCD.drawString(endCenter[0] + "," + endCenter[1],0,0);
			turnAngle = Math.toDegrees(Math.atan2(endCenter[1] - pos[1], endCenter[0] - pos[0])) - pos[2];
		}
		else{
			if(pos[2] > 45 && pos[2] < 180)
				turnAngle = -80;
			else
				turnAngle = 80;
		}
		// Fix angle if needed
		if(turnAngle < 0)
			turnAngle += 360;
		turnAngle = turnAngle % 360;
		
		// Turn
		nav.turnTo(pos[2] + turnAngle, 0);
		while(!nav.isDone()){
			try { Thread.sleep(250); } 
			catch (InterruptedException e) {}
		}
		nav.stop();
		
		// Go forward until an obstacle is found
		nav.move();
		long startTime = System.currentTimeMillis();
		while(!us.flagObstruction() && !us.criticalFlag()){
			if(mode == -1){
				long timeElapsed = System.currentTimeMillis() - startTime;
				double distanceTraveled = timeElapsed * Odometer.getSpeed() / 1000;
				if(distanceTraveled >= 45)
					break;
			}

			try { Thread.sleep(50); } 
			catch (InterruptedException e) {}
		}
		nav.stop();
		
		if(!us.criticalFlag())
			approachBlock();

		try { Thread.sleep(500); } 
		catch (InterruptedException e) {}
		
		// If there is a blue block, collect it
		if(us.getZType() == USGather.HeightCategory.BLUE_BLOCK)
			collect();
		else if(us.getZType() == USGather.HeightCategory.WOODEN_BLOCK)// Otherwise call this again
			navigateBoard(mode * -1);
	}
	// While an obstruction is flagged and no block is seen, continue forward (may return instantly)
	private void approachBlock(){
		nav.move();
		while(us.flagObstruction() && !us.criticalFlag()){
			try { Thread.sleep(50); } 
			catch (InterruptedException e) {}
		}
		try { Thread.sleep(500); } 
		catch (InterruptedException e) {}
		nav.stop();
		
		if(!us.criticalFlag())
			handleOvershoot();
	}
	// Handles overshooting a block
	private void handleOvershoot(){
		Odometer.getPosition(pos);
		nav.turnTo(pos[2] + 355, 0);
		while(!us.flagObstruction() && !us.criticalFlag()){
			try { Thread.sleep(50); } 
			catch (InterruptedException e) {}
		}
		nav.stop();
		
		if(us.flagObstruction() && !us.criticalFlag())
			approachBlock();
	}

	// Collects said block
	private void collect() {
		if(blocksCollected == 0){
			nav.reverse();
			try { Thread.sleep(1000); } 
			catch (InterruptedException e) {}
			nav.stop();
			
			collection.lowerCage();
			collection.openCage();
			
			nav.move();
			try { Thread.sleep(3000); } 
			catch (InterruptedException e) {}
			nav.stop();
			
			try { Thread.sleep(250); } 
			catch (InterruptedException e) {}
			
			collection.closeCage();
			collection.raiseCage();
		}
		else{
			nav.move();
			try {Thread.sleep(3000);} catch(InterruptedException e) {}
			nav.stop();
			
			nav.reverse();
			try {Thread.sleep(50);} catch(InterruptedException e) {}
			//while(us.getDistance() > 5);
			nav.stop();
			
			collection.lowerCage();
			collection.openCage();
			
			nav.move();
			try {Thread.sleep(500);}
			catch (InterruptedException e) {}
			nav.stop();
			
			collection.closeCage();
			collection.raiseCage();
		}
		
		blocksCollected++;
		
		navigateBoard(1);
		//function = FunctionType.OPEN_NAVIGATE;
	}

	// Releases the entire stack (only done at the end of the match)
	private void release() {
		collection.release();
		
		nav.reverse();
		try { Thread.sleep(2500); } 
		catch (InterruptedException e) { }
		nav.stop();
	}
	
	private void returnToStart(int mode){
		// Back up a bit
		nav.reverse();
		try { Thread.sleep(1000); } 
		catch (InterruptedException e) {}
		nav.stop();
		
		// Turn either by +-90degrees or to face the green (or red) zone
		Odometer.getPosition(pos);
		double turnAngle = 0;
		if(mode == 1){
			double[] endCenter = Map2.getEndCenter();
			LCD.drawString(endCenter[0] + "," + endCenter[1],0,0);
			turnAngle = Math.toDegrees(Math.atan2(endCenter[1] - pos[1], endCenter[0] - pos[0])) - pos[2];
		}
		else{
			if(pos[2] > 45 && pos[2] < 180)
				turnAngle = -70;
			else
				turnAngle = 70;
		}
		// Fix angle if needed
		if(turnAngle < 0)
			turnAngle += 360;
		turnAngle = turnAngle % 360;
		
		// Turn
		nav.turnTo(pos[2] + turnAngle, 0);
		while(!nav.isDone()){
			try { Thread.sleep(250); } 
			catch (InterruptedException e) {}
		}
		nav.stop();
		
		// Go forward until an obstacle is found
		nav.move();
		while(!us.flagObstruction()){
			try { Thread.sleep(50); } 
			catch (InterruptedException e) {}
		}
		// While an obstruction is flagged and no block is seen, continue forward (may return instantly)
		while(us.getZType() == USGather.HeightCategory.FLOOR && us.flagObstruction()){
			try { Thread.sleep(50); } 
			catch (InterruptedException e) {}
		}
		nav.stop();
		
		navigateBoard(mode * -1);
	}

}
